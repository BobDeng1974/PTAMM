//逐像素的光照
//fragment shader
//#version 140
#extension GL_ARB_texture_rectangle : enable
uniform sampler2D ShadowMap;
uniform sampler2D texture;
// This define the value to move one pixel left or right
uniform float xPixelOffset;
// This define the value to move one pixel up or down
uniform float yPixelOffset;
//uniform float shadowVariable;
varying vec3 normal;
varying vec3 lightDir;
varying vec3 eyeVec;
varying vec4 ShadowCoord;
varying vec4 diffuse,ambient;  
varying vec3 halfVector; 

float lookup(vec2 offSet)
{
	vec4 tmp = ShadowCoord + vec4(offSet.x*xPixelOffset*ShadowCoord.w, offSet.y*yPixelOffset*ShadowCoord.w, 0.0, 0.0);

	vec4 shadowCoordinateWdivide = tmp / tmp.w;
	shadowCoordinateWdivide.z += 0.0009;

	float distanceFromLight = texture2D(ShadowMap,shadowCoordinateWdivide.xy).z;
	if (ShadowCoord.w > 0.0 && distanceFromLight < shadowCoordinateWdivide.z)  //影子
	{
		return 0.5;
	}
	else //非影子
		return 1.0;
}

//最终绘制的结果是：虚拟物体+虚拟物体产生的阴影(投影在中介面上的)
void main(void) {

	//phong shader 不改变aphal值
    vec4 finalColor = texture2D(texture,gl_TexCoord[0].st);
    
    vec3 N = normalize(normal);
    vec3 L = normalize(lightDir);
    
    float lambertTerm = max(dot(N,L),0.0);
  
    if(lambertTerm>=0.0) {
        finalColor += 0.7*0.08*lambertTerm;
    
		vec3 E = normalize(eyeVec);
		vec3 R = reflect(-L, N);
		float specular = pow(max(dot(R, E),0.0),32.0);//gl_FrontMaterial.shininess);
		finalColor += 0.5*1*specular;
    }
	//end of phong shader
	
	
	//added in 2014.10.27
	vec3 n,halfV;  
    float NdotL,NdotHV;  

    vec4 color = ambient;  

    n = normalize(normal);  
    
    NdotL = max(dot(n,lightDir),0.0);  
	if (NdotL > 0.0)  
	{  
		color += diffuse * NdotL;  
		halfV = normalize(halfVector);  
		NdotHV = max(dot(n,halfV),0.0);  
		color += gl_FrontMaterial.specular *  
				gl_LightSource[0].specular *  
				pow(NdotHV, gl_FrontMaterial.shininess);  
	}
    

	float shadow = 0.0;
	float x,y;
	for (y = -7.5 ; y <=7.5 ; y+=1.0)
	{
		for (x = -7.5 ; x <=7.5 ; x+=1.0)
		{
			shadow += lookup(vec2(x,y));
		}
	}
	shadow /= 225.0;

	//add by 2012.2.26
	//vec4 texture_color = texture2D(texture,gl_TexCoord[0].st);

	//Mediator平面如果没有接受到阴影就 不绘制。但如果接受到阴影，则绘制
	if(gl_Color.a == 0.0)
	{
		gl_FragColor = vec4(shadow * color.rgb, 0.0);
	}
	else{
		gl_FragColor = shadow * color;
	}
	
	//gl_FragColor = color;
}


//vertex shader

//#version 140
#extension GL_ARB_texture_rectangle : enable
varying vec3 normal;
varying vec3 lightDir;
varying vec3 eyeVec;
varying vec4 ShadowCoord;
varying vec4 diffuse,ambient;  
varying vec3 halfVector; 

void main() {
	
    normal = normalize(gl_NormalMatrix * gl_Normal);  
 
    lightDir = normalize(vec3(gl_LightSource[0].position));  

    halfVector = normalize(gl_LightSource[0].halfVector.xyz);  

    diffuse = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;  
    ambient = gl_FrontMaterial.ambient * gl_LightSource[0].ambient;  
    ambient += gl_FrontMaterial.ambient * gl_LightModel.ambient; 


	//phong shader

	vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
	eyeVec   = -vVertex;
	
	ShadowCoord= gl_TextureMatrix[7] * gl_Vertex;
	
	gl_Position = ftransform();
	gl_FrontColor = gl_Color;
	
	gl_TexCoord[0] = gl_MultiTexCoord0;
}














//加纹理的shader

//fragment shader

//#version 140
#extension GL_ARB_texture_rectangle : enable
uniform sampler2D ShadowMap;
uniform sampler2D texture;
// This define the value to move one pixel left or right
uniform float xPixelOffset;
// This define the value to move one pixel up or down
uniform float yPixelOffset;
//uniform float shadowVariable;
varying vec3 normal;
varying vec3 lightDir;
varying vec3 eyeVec;
varying vec4 ShadowCoord;


float lookup(vec2 offSet)
{
	vec4 tmp = ShadowCoord + vec4(offSet.x*xPixelOffset*ShadowCoord.w, offSet.y*yPixelOffset*ShadowCoord.w, 0.0, 0.0);

	vec4 shadowCoordinateWdivide = tmp / tmp.w;
	shadowCoordinateWdivide.z += 0.0009;

	float distanceFromLight = texture2D(ShadowMap,shadowCoordinateWdivide.xy).z;
	if (ShadowCoord.w > 0.0 && distanceFromLight < shadowCoordinateWdivide.z)  //影子
	{
		return 0.5;
	}
	else //非影子
		return 1.0;
}

//最终绘制的结果是：虚拟物体+虚拟物体产生的阴影(投影在中介面上的)
void main(void) {
	//phong shader 不改变aphal值
    vec4 finalColor = texture2D(texture,gl_TexCoord[0].st);
  
    vec3 N = normalize(normal);
    vec3 L = normalize(lightDir);
  
    float lambertTerm = max(dot(N,L),0.0);
  
    if(lambertTerm>=0.0) {
        finalColor += 0.7*0.08*lambertTerm;
    
		vec3 E = normalize(eyeVec);
		vec3 R = reflect(-L, N);
		float specular = pow(max(dot(R, E),0.0),32.0);//gl_FrontMaterial.shininess);
		finalColor += 0.5*1*specular;
    }
	//end of phong shader
	
	float shadow = 0.0;
	float x,y;
	for (y = -7.5 ; y <=7.5 ; y+=1.0)
	{
		for (x = -7.5 ; x <=7.5 ; x+=1.0)
		{
			shadow += lookup(vec2(x,y));
		}
	}					
	shadow /= 225.0;

	//add by 2012.2.26
	//vec4 texture_color = texture2D(texture,gl_TexCoord[0].st);

	//Mediator平面如果没有接受到阴影就 不绘制。但如果接受到阴影，则绘制
	if(gl_Color.a == 0.0)
	{
		gl_FragColor = vec4(shadow * finalColor.rgb, 0.0);
	}
	//else if(gl_Color.a < 0.9)
	//{
	//	if(shadow > 0.999)  //非阴影
	//	{
	//		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
	//	}
	//	else
	//	{
	//		gl_FragColor = shadow * finalColor;
	//	}
	//}
	else{
		gl_FragColor = shadow * finalColor;
	}
	//gl_FragColor = shadow* finalColor;
}










vertex shader

//#version 140
#extension GL_ARB_texture_rectangle : enable
varying vec3 normal;
varying vec3 lightDir;
varying vec3 eyeVec;
varying vec4 ShadowCoord;

void main() {
  //phong shader
  normal = gl_NormalMatrix * gl_Normal;
  vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
  lightDir = vec3(gl_LightSource[0].position.xyz - vVertex);
  eyeVec   = -vVertex;

  ShadowCoord= gl_TextureMatrix[7] * gl_Vertex;

  gl_Position = ftransform();
  gl_FrontColor = gl_Color;

  gl_TexCoord[0] = gl_MultiTexCoord0;
}
